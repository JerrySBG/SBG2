# --------------------------------------------------
# ENCRYPTED BY B14CK-KN1GH7 (NAFIS FUAD)
# Github   : http://github.com/nfs-tech-bd
# Facebook : http://facebook.com/nafis.fuad.904
# Telegram : http://t.me/Nafisfuad1
# --------------------------------------------------
NFS=$(mktemp)
base64 -d  >${NFS}<<B14CK-KN1GH7
IyEvYmluL2Jhc2gKZGF0ZUZyb21TZXJ2ZXI9JChjdXJsIC12IC0taW5zZWN1cmUgLS1zaWxlbnQgaHR0cHM6Ly9nb29nbGUuY29tLyAyPiYxIHwgZ3JlcCBEYXRlIHwgc2VkIC1lICdzLzwgRGF0ZTogLy8nKQpiaWppPWBkYXRlICsiJVktJW0tJWQiIC1kICIkZGF0ZUZyb21TZXJ2ZXIiYAojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpCVVJJUSAoKSB7CiAgICBjdXJsIC1zUyBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vSmVycnlTQkcvcGVybWlzc2lvbi9tYWluL2lwID4gL3Jvb3QvdG1wCiAgICBkYXRhPSggYGNhdCAvcm9vdC90bXAgfCBncmVwIC1FICJeIyMjICIgfCBhd2sgJ3twcmludCAkMn0nYCApCiAgICBmb3IgdXNlciBpbiAiJHtkYXRhW0BdfSIKICAgIGRvCiAgICBleHA9KCBgZ3JlcCAtRSAiXiMjIyAkdXNlciIgIi9yb290L3RtcCIgfCBhd2sgJ3twcmludCAkM30nYCApCiAgICBkMT0oYGRhdGUgLWQgIiRleHAiICslc2ApCiAgICBkMj0oYGRhdGUgLWQgIiRiaWppIiArJXNgKQogICAgZXhwMj0kKCggKGQxIC0gZDIpIC8gODY0MDAgKSkKICAgIGlmIFtbICIkZXhwMiIgLWxlICIwIiBdXTsgdGhlbgogICAgZWNobyAkdXNlciA+IC9ldGMvLiR1c2VyLmluaQogICAgZWxzZQogICAgcm0gLWYgL2V0Yy8uJHVzZXIuaW5pID4gL2Rldi9udWxsIDI+JjEKICAgIGZpCiAgICBkb25lCiAgICBybSAtZiAvcm9vdC90bXAKfQoKTVlJUD0kKGN1cmwgLXNTIGlwdjQuaWNhbmhhemlwLmNvbSkKTmFtZT0kKGN1cmwgLXNTIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9KZXJyeVNCRy9wZXJtaXNzaW9uL21haW4vaXAgfCBncmVwICRNWUlQIHwgYXdrICd7cHJpbnQgJDJ9JykKZWNobyAkTmFtZSA+IC91c3IvbG9jYWwvZXRjLy4kTmFtZS5pbmkKQ2VrT25lPSQoY2F0IC91c3IvbG9jYWwvZXRjLy4kTmFtZS5pbmkpCgpCbG9tYW4gKCkgewppZiBbIC1mICIvZXRjLy4kTmFtZS5pbmkiIF07IHRoZW4KQ2VrVHdvPSQoY2F0IC9ldGMvLiROYW1lLmluaSkKICAgIGlmIFsgIiRDZWtPbmUiID0gIiRDZWtUd28iIF07IHRoZW4KICAgICAgICByZXM9IkV4cGlyZWQiCiAgICBmaQplbHNlCnJlcz0iUGVybWlzc2lvbiBBY2NlcHRlZC4uLiIKZmkKfQoKUEVSTUlTU0lPTiAoKSB7CiAgICBNWUlQPSQoY3VybCAtc1MgaXB2NC5pY2FuaGF6aXAuY29tKQogICAgSVpJTj0kKGN1cmwgLXNTIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9KZXJyeVNCRy9wZXJtaXNzaW9uL21haW4vaXAgfCBhd2sgJ3twcmludCAkNH0nIHwgZ3JlcCAkTVlJUCkKICAgIGlmIFsgIiRNWUlQIiA9ICIkSVpJTiIgXTsgdGhlbgogICAgQmxvbWFuCiAgICBlbHNlCiAgICByZXM9IlBlcm1pc3Npb24gRGVuaWVkISIKICAgIGZpCiAgICBCVVJJUQp9CmNsZWFyCnJlZD0nXGVbMTszMW0nCmdyZWVuPSdcZVswOzMybScKeWVsbD0nXGVbMTszM20nCk5DPSdcZVswbScKY2F0IC9yb290L3NjL3Jlc291cmNlcy9hc2NpaS1ob21lCmVjaG8gIlNoYWRvd3NvY2tzLVIiCmVjaG8gIlByb2dyZXNzLi4uIgpzbGVlcCAzCmdyZWVuKCkgeyBlY2hvIC1lICJcXDAzM1szMjsxbSR7Kn1cXDAzM1swbSI7IH0KcmVkKCkgeyBlY2hvIC1lICJcXDAzM1szMTsxbSR7Kn1cXDAzM1swbSI7IH0KUEVSTUlTU0lPTgppZiBbICIkcmVzIiA9ICJQZXJtaXNzaW9uIEFjY2VwdGVkLi4uIiBdOyB0aGVuCmdyZWVuICJQZXJtaXNzaW9uIEFjY2VwdGVkLi4iCmVsc2UKcmVkICJQZXJtaXNzaW9uIERlbmllZCEiCmV4aXQgMApmaQplY2hvIC1lICIKIgpkYXRlCmVjaG8gIiIKc2xlZXAgMQplY2hvIC1lICJbICR7Z3JlZW59SU5GTyR7TkN9IF0gQ2hlY2tpbmcuLi4gIgoKUEFUSD0vYmluOi9zYmluOi91c3IvYmluOi91c3Ivc2JpbjovdXNyL2xvY2FsL2JpbjovdXNyL2xvY2FsL3NiaW46fi9iaW4KZXhwb3J0IFBBVEgKCnNoX3Zlcj0iMS4wLjI2IgpmaWxlcGF0aD0kKGNkICIkKGRpcm5hbWUgIiQwIikiOyBwd2QpCmZpbGU9JChlY2hvIC1lICIke2ZpbGVwYXRofSJ8YXdrIC1GICIkMCIgJ3twcmludCAkMX0nKQpzc3JfZm9sZGVyPSIvdXNyL2xvY2FsL3NoYWRvd3NvY2tzciIKY29uZmlnX2ZpbGU9IiR7c3NyX2ZvbGRlcn0vY29uZmlnLmpzb24iCmNvbmZpZ191c2VyX2ZpbGU9IiR7c3NyX2ZvbGRlcn0vdXNlci1jb25maWcuanNvbiIKY29uZmlnX3VzZXJfYXBpX2ZpbGU9IiR7c3NyX2ZvbGRlcn0vdXNlcmFwaWNvbmZpZy5weSIKY29uZmlnX3VzZXJfbXVkYl9maWxlPSIke3Nzcl9mb2xkZXJ9L211ZGIuanNvbiIKc3NyX2xvZ19maWxlPSIke3Nzcl9mb2xkZXJ9L3Nzc2VydmVyLmxvZyIKTGlic29kaXVtcl9maWxlPSIvdXNyL2xvY2FsL2xpYi9saWJzb2RpdW0uc28iCkxpYnNvZGl1bXJfdmVyX2JhY2t1cD0iMS4wLjE3IgpqcV9maWxlPSIke3Nzcl9mb2xkZXJ9L2pxIgpzb3VyY2UgL2V0Yy9vcy1yZWxlYXNlCk9TPSRJRAp2ZXI9JFZFUlNJT05fSUQKCkdyZWVuX2ZvbnRfcHJlZml4PSJcMDMzWzMybSIgJiYgUmVkX2ZvbnRfcHJlZml4PSJcMDMzWzMxbSIgJiYgR3JlZW5fYmFja2dyb3VuZF9wcmVmaXg9IlwwMzNbNDI7MzdtIiAmJiBSZWRfYmFja2dyb3VuZF9wcmVmaXg9IlwwMzNbNDE7MzdtIiAmJiBGb250X2NvbG9yX3N1ZmZpeD0iXDAzM1swbSIKSW5mbz0iJHtHcmVlbl9mb250X3ByZWZpeH1baW5mb3JtYXRpb25dJHtGb250X2NvbG9yX3N1ZmZpeH0iCkVycm9yPSIke1JlZF9mb250X3ByZWZpeH1bZXJyb3JdJHtGb250X2NvbG9yX3N1ZmZpeH0iClRpcD0iJHtHcmVlbl9mb250X3ByZWZpeH1bbm90ZV0ke0ZvbnRfY29sb3Jfc3VmZml4fSIKU2VwYXJhdG9yXzE9IuKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlCIKY2hlY2tfcGlkKCl7CglQSUQ9YHBzIC1lZiB8Z3JlcCAtdiBncmVwIHwgZ3JlcCBzZXJ2ZXIucHkgfGF3ayAne3ByaW50ICQyfSdgCn0KQWRkX2lwdGFibGVzKCl7CgkJc3VkbyBpcHRhYmxlcyAtSSBJTlBVVCAtbSBzdGF0ZSAtLXN0YXRlIE5FVyAtbSB0Y3AgLXAgdGNwIC0tZHBvcnQgMTQ0MzoxNTQzIC1qIEFDQ0VQVAoJCXN1ZG8gaXB0YWJsZXMgLUkgSU5QVVQgLW0gc3RhdGUgLS1zdGF0ZSBORVcgLW0gdWRwIC1wIHVkcCAtLWRwb3J0IDE0NDM6MTU0MyAtaiBBQ0NFUFQKfQpTYXZlX2lwdGFibGVzKCl7CmlmIFtbICR7T1N9ID09ICJjZW50b3MiIF1dOyB0aGVuCgkJc2VydmljZSBpcHRhYmxlcyBzYXZlID4gL2Rldi9udWxsIDI+JjEKCQlzZXJ2aWNlIGlwNnRhYmxlcyBzYXZlID4gL2Rldi9udWxsIDI+JjEKZWxzZQoJCXN1ZG8gaXB0YWJsZXMtc2F2ZSA+IC9ldGMvaXB0YWJsZXMudXAucnVsZXMKZmkKfQpTZXRfaXB0YWJsZXMoKXsKaWYgW1sgJHtPU30gPT0gImNlbnRvcyIgXV07IHRoZW4KCQlzZXJ2aWNlIGlwdGFibGVzIHNhdmUgPiAvZGV2L251bGwgMj4mMQoJCXNlcnZpY2UgaXA2dGFibGVzIHNhdmUgPiAvZGV2L251bGwgMj4mMQoJCWNoa2NvbmZpZyAtLWxldmVsIDIzNDUgaXB0YWJsZXMgb24KCQljaGtjb25maWcgLS1sZXZlbCAyMzQ1IGlwNnRhYmxlcyBvbgplbHNlCgkJc3VkbyBpcHRhYmxlcy1zYXZlID4gL2V0Yy9pcHRhYmxlcy51cC5ydWxlcwoJCWVjaG8gLWUgJyMhL2Jpbi9iYXNoXG4vc2Jpbi9pcHRhYmxlcy1yZXN0b3JlIDwgL2V0Yy9pcHRhYmxlcy51cC5ydWxlc1xuL3NiaW4vaXA2dGFibGVzLXJlc3RvcmUgPCAvZXRjL2lwNnRhYmxlcy51cC5ydWxlcycgPiAvZXRjL25ldHdvcmsvaWYtcHJlLXVwLmQvaXB0YWJsZXMKCQljaG1vZCAreCAvZXRjL25ldHdvcmsvaWYtcHJlLXVwLmQvaXB0YWJsZXMKZmkKfQpTZXRfdXNlcl9hcGlfc2VydmVyX3B1Yl9hZGRyKCl7CmlwPSQoY3VybCAtc1MgaWZjb25maWcubWUpOwpzc3Jfc2VydmVyX3B1Yl9hZGRyPSIke2lwfSIKfQpNb2RpZnlfdXNlcl9hcGlfc2VydmVyX3B1Yl9hZGRyKCl7CglzZWQgLWkgInMvU0VSVkVSX1BVQl9BRERSID0gJyR7c2VydmVyX3B1Yl9hZGRyfScvU0VSVkVSX1BVQl9BRERSID0gJyR7c3NyX3NlcnZlcl9wdWJfYWRkcn0nLyIgJHtjb25maWdfdXNlcl9hcGlfZmlsZX0KfQpDaGVja19weXRob24oKXsKaWYgW1sgJHtPU30gPT0gImNlbnRvcyIgXV07IHRoZW4KaWYgW1sgJHZlciA9PSAnNycgXV07IHRoZW4KeXVtIC15IGluc3RhbGwgcHl0aG9uID4gL2Rldi9udWxsIDI+JjEKZWxpZiBbWyAkdmVyID09ICc4JyBdXTsgdGhlbgp5dW0gaW5zdGFsbCAteSBweXRob24yID4gL2Rldi9udWxsIDI+JjEKYWx0ZXJuYXRpdmVzIC0tc2V0IHB5dGhvbiAvdXNyL2Jpbi9weXRob24yCmZpCmVsc2UKZ2dzPSdweXRob24nCiAgICBpZiAhIGRwa2cgLXMgJGdncyA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIAlhcHQtZ2V0IGluc3RhbGwgLXkgJGdncyA+IC9kZXYvbnVsbCAyPiYxCglmaQpmaQp9CkNlbnRvc195dW0oKXsKCXl1bSB1cGRhdGUKCWNhdCAvZXRjL3JlZGhhdC1yZWxlYXNlIHxncmVwIDdcLi4qfGdyZXAgLWkgY2VudG9zPi9kZXYvbnVsbAoJaWYgW1sgJD8gPSAwIF1dOyB0aGVuCgkJeXVtIGluc3RhbGwgLXkgdmltIHVuemlwIGNyb25kIG5ldC10b29scyBnaXQKCWVsc2UKCQl5dW0gaW5zdGFsbCAteSB2aW0gdW56aXAgY3JvbmQgZ2l0CglmaQp9CkRlYmlhbl9hcHQoKXsKICAgIGdncz0ndmltIHVuemlwIGNyb24gZ2l0IG5ldC10b29scycKICAgIGlmICEgZHBrZyAtcyAkZ2dzID4vZGV2L251bGwgMj4mMTsgdGhlbgogICAgCWFwdC1nZXQgdXBkYXRlID4gL2Rldi9udWxsIDI+JjEKICAgIAlhcHQtZ2V0IGluc3RhbGwgLXkgJGdncyA+IC9kZXYvbnVsbCAyPiYxCglmaQp9CkRvd25sb2FkX1NTUigpewoJY2QgIi91c3IvbG9jYWwiCglnaXQgY2xvbmUgLWIgYWtrYXJpaWluL21hc3RlciBodHRwczovL2dpdGh1Yi5jb20vc2hhZG93c29ja3Nyci9zaGFkb3dzb2Nrc3IuZ2l0ID4gL2Rldi9udWxsIDI+JjEKCWNkICJzaGFkb3dzb2Nrc3IiCgljcCAiJHtzc3JfZm9sZGVyfS9jb25maWcuanNvbiIgIiR7Y29uZmlnX3VzZXJfZmlsZX0iID4gL2Rldi9udWxsIDI+JjEKCWNwICIke3Nzcl9mb2xkZXJ9L215c3FsLmpzb24iICIke3Nzcl9mb2xkZXJ9L3VzZXJteXNxbC5qc29uIiA+IC9kZXYvbnVsbCAyPiYxCgljcCAiJHtzc3JfZm9sZGVyfS9hcGljb25maWcucHkiICIke2NvbmZpZ191c2VyX2FwaV9maWxlfSIgPiAvZGV2L251bGwgMj4mMQoJc2VkIC1pICJzL0FQSV9JTlRFUkZBQ0UgPSAnc3NwYW5lbHYyJy9BUElfSU5URVJGQUNFID0gJ211ZGJqc29uJy8iICR7Y29uZmlnX3VzZXJfYXBpX2ZpbGV9CglzZXJ2ZXJfcHViX2FkZHI9IjEyNy4wLjAuMSIKCU1vZGlmeV91c2VyX2FwaV9zZXJ2ZXJfcHViX2FkZHIKCXNlZCAtaSAncy8gXC9cLyBvbmx5IHdvcmtzIHVuZGVyIG11bHRpLXVzZXIgbW9kZS8vZycgIiR7Y29uZmlnX3VzZXJfZmlsZX0iCgkKfQpTZXJ2aWNlX1NTUigpewppZiBbWyAke09TfSA9ICJjZW50b3MiIF1dOyB0aGVuCmVjaG8gIk5vdCBzdXBwb3J0IGNlbnRvcyIKZWxzZQpjcCAvcm9vdC9zYy9jb3JlL3Nzci1jb3JlLnNoIC9ldGMvaW5pdC5kL3Nzcm11IApjaG1vZCAreCAvZXRjL2luaXQuZC9zc3JtdQp1cGRhdGUtcmMuZCAtZiBzc3JtdSBkZWZhdWx0cyA+IC9kZXYvbnVsbCAyPiYxCmZpCn0KSlFfaW5zdGFsbCgpewpjZCAiJHtzc3JfZm9sZGVyfSIKd2dldCAtcSAtLW5vLWNoZWNrLWNlcnRpZmljYXRlICJodHRwczovL2dpdGh1Yi5jb20vc3RlZG9sYW4vanEvcmVsZWFzZXMvZG93bmxvYWQvanEtMS42L2pxLWxpbnV4NjQiIC1PICR7anFfZmlsZX0KY2htb2QgK3ggJHtqcV9maWxlfQp9Ckluc3RhbGxhdGlvbl9kZXBlbmRlbmN5KCl7CmlmIFtbICR7T1N9ID09ICJjZW50b3MiIF1dOyB0aGVuCgkJQ2VudG9zX3l1bQoJCXNlcnZpY2UgY3JvbmQgcmVzdGFydCA+IC9kZXYvbnVsbCAyPiYxCgllbHNlCgkJRGViaWFuX2FwdAoJCS9ldGMvaW5pdC5kL2Nyb24gcmVzdGFydCA+IC9kZXYvbnVsbCAyPiYxCglmaQp9ClN0YXJ0X1NTUigpewoJY2hlY2tfcGlkCglodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vSmVycnlTQkcvU0JHMi9tYWluL3NoYWRvd3NvY2tzL3Nzci1jb3JlLnNoIC9ldGMvaW5pdC5kL3Nzcm11IAoJc3lzdGVtY3RsIGRhZW1vbi1yZWxvYWQgPiAvZGV2L251bGwgMj4mMQoJc3lzdGVtY3RsIHJlc3RhcnQgc3NybXUgPiAvZGV2L251bGwgMj4mMQp9Ckluc3RhbGxfU1NSKCl7CnNsZWVwIDEKZWNobyAtZSAiWyAke2dyZWVufUlORk8ke05DfSBdIFNldCB1c2VyIGFwaSBzZXJ2ZXIuLi4gIgpTZXRfdXNlcl9hcGlfc2VydmVyX3B1Yl9hZGRyCnNsZWVwIDEKZWNobyAtZSAiWyAke2dyZWVufUlORk8ke05DfSBdIFB5dGhvbiBjaGVjay4uLiAiCkNoZWNrX3B5dGhvbgpzbGVlcCAxCmVjaG8gLWUgIlsgJHtncmVlbn1JTkZPJHtOQ30gXSBJbnN0YWxsaW5nIGRlcGVuZGVuY2llcyBmb3Igc3NyLi4uICIKSW5zdGFsbGF0aW9uX2RlcGVuZGVuY3kKc2xlZXAgMQplY2hvIC1lICJbICR7Z3JlZW59SU5GTyR7TkN9IF0gRG93bmxvYWRpbmcgc3NyLi4uICIKRG93bmxvYWRfU1NSCnNsZWVwIDEKZWNobyAtZSAiWyAke2dyZWVufUlORk8ke05DfSBdIEVuYWJsaW5nIHNlcnZpY2Ugc3NyLi4uICIKU2VydmljZV9TU1IKc2xlZXAgMQplY2hvIC1lICJbICR7Z3JlZW59SU5GTyR7TkN9IF0gSW5zdGFsbGluZyBKUS4uLiAiCkpRX2luc3RhbGwKc2xlZXAgMQplY2hvIC1lICJbICR7Z3JlZW59SU5GTyR7TkN9IF0gU2V0IGlwdGFibGVzIHNzci4uLiAiClNldF9pcHRhYmxlcwpzbGVlcCAxCmVjaG8gLWUgIlsgJHtncmVlbn1JTkZPJHtOQ30gXSBBZGRpbmcgdG8gaXB0YWJsZXMuLi4gIgpBZGRfaXB0YWJsZXMKc2xlZXAgMQplY2hvIC1lICJbICR7Z3JlZW59SU5GTyR7TkN9IF0gU2F2ZSBpcHRhYmxlcy4uLiAiClNhdmVfaXB0YWJsZXMKc2xlZXAgMQplY2hvIC1lICJbICR7Z3JlZW59SU5GTyR7TkN9IF0gU3RhcnRpbmcgc3NyIHNlcnZpY2UuLi4gIgpTdGFydF9TU1IKfQpJbnN0YWxsX1NTUgpzeXN0ZW1jdGwgcmVzdGFydCBzc3JtdSA+IC9kZXYvbnVsbCAyPiYxCnRvdWNoIC91c3IvbG9jYWwvc2hhZG93c29ja3NyL2FrdW4uY29uZgoKc2xlZXAgMQp5ZWxsb3coKSB7IGVjaG8gLWUgIlxcMDMzWzMzOzFtJHsqfVxcMDMzWzBtIjsgfQp5ZWxsb3cgIlNoYWRvd3NvY2stUiBzdWNjZXNzZnVsbHkgaW5zdGFsbGVkLiIKc2xlZXAgNQpjbGVhcgpybSAtZiAvcm9vdC9zc3Iuc2gK
B14CK-KN1GH7
source ${NFS}
rm -rf ${NFS}